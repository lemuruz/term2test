from django.contrib.staticfiles.testing import StaticLiveServerTestCase
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from mypoll.models import Poll, Choice
from django.urls import reverse
import time

class testUserPlayPoll(StaticLiveServerTestCase):
    def setUp(self):
        
        self.poll = Poll.objects.create(name="‡πÅ‡∏°‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏≤")
        self.choice1 = Choice.objects.create(poll=self.poll, name="‡πÅ‡∏°‡∏ß", vote_count=1)
        self.choice2 = Choice.objects.create(poll=self.poll, name="‡∏´‡∏°‡∏≤", vote_count=2)

        self.browser = webdriver.Chrome()
    def tearDown(self):
        self.browser.quit()

    def test(self):
        # ‡∏õ‡∏≤‡∏£‡πå‡∏Ñ‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö polls ‡∏õ‡∏≤‡∏£‡πå‡∏Ñ‡∏à‡∏∂‡∏á‡∏≠‡∏¢‡∏≤‡∏Å‡∏•‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏î‡∏π
        # ‡∏õ‡∏≤‡∏£‡πå‡∏Ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
        self.browser.get(self.live_server_url)
        # ‡∏õ‡∏≤‡∏£‡πå‡∏Ñ‡πÄ‡∏´‡πá‡∏ô‡∏•‡∏¥‡∏á‡∏¥‡∏Ñ‡πå poll ‡∏≠‡∏¢‡∏π‡πà 1 ‡∏≠‡∏±‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡πà‡∏≤ "‡πÅ‡∏°‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏≤"
        cat_or_dog_poll = self.browser.find_element(By.LINK_TEXT, "‡πÅ‡∏°‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏≤")
        # ‡∏õ‡∏≤‡∏£‡πå‡∏Ñ‡∏Å‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏•‡∏¥‡∏á‡∏Ñ‡πå
        cat_or_dog_poll.click()
        # ‡∏õ‡∏≤‡∏£‡πå‡∏Ñ‡πÄ‡∏´‡πá‡∏ô‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏° (‡πÅ‡∏°‡∏ß ‡∏Å‡∏±‡∏ö ‡∏´‡∏°‡∏≤)
        catBtn = self.browser.find_element(By.ID, "‡πÅ‡∏°‡∏ß")
        dogBtn = self.browser.find_element(By.ID, "‡∏´‡∏°‡∏≤")
        catBtn.is_displayed()
        dogBtn.is_displayed()

        # ‡∏õ‡∏≤‡∏£‡πå‡∏Ñ‡∏Å‡∏î ‡∏´‡∏°‡∏≤ ‡πÅ‡∏•‡∏∞‡∏Å‡∏î submit
        dogBtn.click()
        self.browser.find_element(By.ID, "Submit Vote").click()
        # ‡∏õ‡∏≤‡∏£‡πå‡∏Ñ‡πÄ‡∏´‡πá‡∏ô‡∏ß‡πà‡∏≤ ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ß‡πà‡∏≤ ‡πÅ‡∏°‡∏ß => 11 ‡∏´‡∏°‡∏≤ => 8
        catScore = self.browser.find_element(By.ID, "‡πÅ‡∏°‡∏ß")
        dogScore = self.browser.find_element(By.ID, "‡∏´‡∏°‡∏≤")
        self.assertEqual(catScore.text, "‡πÅ‡∏°‡∏ß (1)")
        self.assertEqual(dogScore.text, "‡∏´‡∏°‡∏≤ (3)")


class testHotAndWarm(StaticLiveServerTestCase):
    def setUp(self):    
        self.poll_hot = Poll.objects.create(name="Hot Poll")
        self.poll_warm = Poll.objects.create(name="Warm Poll")
        self.poll_normal = Poll.objects.create(name="Normal Poll")
        
        self.choice1 = Choice.objects.create(poll=self.poll_hot, name="Choice1", vote_count=50)
        self.choice2 = Choice.objects.create(poll=self.poll_warm, name="Choice2", vote_count=10)
        self.choice3 = Choice.objects.create(poll=self.poll_normal, name="Choice3", vote_count=0)

        self.browser = webdriver.Chrome()

    def tearDown(self):
        self.browser.quit()
    
    def test_poll_vote_and_classification(self):
        self.browser.get(self.live_server_url)
        
        # Check Hot Poll
        self.assertIn("[üî• HOT] Hot Poll", self.browser.page_source)
        self.assertIn("[üîº WARM] Warm Poll", self.browser.page_source)
        self.assertIn("Normal Poll", self.browser.page_source)
        
        # Click and vote for each category

        for poll_name in ["[üî• HOT] Hot Poll", "[üîº WARM] Warm Poll", "Normal Poll"]:
            poll_link = self.browser.find_element(By.LINK_TEXT, poll_name)
            poll_link.click()
            

            match poll_name:
                case "[üî• HOT] Hot Poll":choice = "Choice1"
                case "[üîº WARM] Warm Poll":choice = "Choice2"
                case "Normal Poll":choice = "Choice3"
            choice_button = self.browser.find_element(By.ID, choice)
            choice_button.click()
            
            self.browser.find_element(By.ID, "Submit Vote").click()
        
            # Check if vote count is updated correctly
        
            choice_label = self.browser.find_element(By.ID, choice)
            vote_count = int(choice_label.text.split("(")[1].split(")")[0])
            
            if poll_name == "Hot Poll":
                self.assertTrue(vote_count > 50)
            elif poll_name == "Warm Poll":
                self.assertTrue(vote_count > 10)
            else:
                self.assertTrue(vote_count >= 1)
            
            # Navigate back to home page
            home_button = self.browser.find_element(By.TAG_NAME, "button")
            home_button.click()

class testPrivatePolls(StaticLiveServerTestCase):
    def setUp(self):    
        self.poll_private = Poll.objects.create(name="private Poll",private = True)
        self.poll_normal = Poll.objects.create(name="Normal Poll",private = False)
        
        self.choice1 = Choice.objects.create(poll=self.poll_private, name="Choice1", vote_count=53)
        self.choice2 = Choice.objects.create(poll=self.poll_normal, name="Choice2", vote_count=10)

        self.browser = webdriver.Chrome()

    def tearDown(self):
        self.browser.quit()
    
    def test_private_and_normal_poll(self):
        self.browser.get(self.live_server_url)
        
        self.assertIn("All Polls", self.browser.page_source)
        self.assertIn("Normal Poll", self.browser.page_source)
        
        normalpoll_link = self.browser.find_element(By.LINK_TEXT, "[üîº WARM] Normal Poll")
        normalpoll_link.click()


        choice_button = self.browser.find_element(By.ID, "Choice2")
        choice_button.click()

        self.browser.find_element(By.ID, "Submit Vote").click()
        
        choice_label = self.browser.find_element(By.ID, "Choice2")
        vote_count = int(choice_label.text.split("(")[1].split(")")[0])
            
        self.assertEqual(vote_count,11)

        home_button = self.browser.find_element(By.TAG_NAME, "button")
        home_button.click()
#-----------------------------------------------------------------------------------------------
        self.browser.get(f"{self.live_server_url}/private/")

        self.assertIn("Private Polls", self.browser.page_source)
        self.assertIn("[üî• HOT] private Poll", self.browser.page_source)
        
        normalpoll_link = self.browser.find_element(By.LINK_TEXT, "[üî• HOT] private Poll")
        normalpoll_link.click()

        choice_button = self.browser.find_element(By.ID, "Choice1")
        choice_button.click()
        self.browser.find_element(By.ID, "Submit Vote").click()

        choice_label = self.browser.find_element(By.ID, "Choice1")
        vote_count = int(choice_label.text.split("(")[1].split(")")[0])
            
        self.assertEqual(vote_count,54)


# ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠ ‡∏õ‡∏≤‡∏£‡πå‡∏Ñ

# ‡∏õ‡∏≤‡∏£‡πå‡∏Ñ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á private poll 
# ‡∏õ‡∏≤‡∏£‡πå‡∏Ñ‡∏£‡∏π‡πâcode‡∏Ç‡∏≠‡∏á private poll ‡∏ó‡∏µ‡πà‡∏õ‡∏≤‡∏£‡πå‡∏Ñ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á
# ‡∏õ‡∏≤‡∏£‡πå‡∏Ñ‡∏Å‡∏î ‡∏õ‡∏∏‡πà‡∏°/‡∏•‡∏¥‡∏á‡∏Ñ‡πå access private poll
# ‡∏õ‡∏≤‡∏£‡πå‡∏Å‡∏Å‡∏£‡∏≠‡∏Åcode private poll ex.hycbf7@$68
# ‡∏õ‡∏≤‡∏£‡πå‡∏Ñ‡πÄ‡∏´‡πá‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ "have you cry before" ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏Å "yes" ‡∏Å‡∏±‡∏ö "no"
# ‡∏õ‡∏≤‡∏£‡πå‡∏Ñ‡∏ï‡∏≠‡∏ö "yes"
# ‡∏õ‡∏≤‡∏£‡πå‡∏Ñ‡πÄ‡∏´‡πá‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£ vote "yes" : 20 "no" : 6